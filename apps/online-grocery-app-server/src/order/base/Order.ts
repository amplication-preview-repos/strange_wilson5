/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsDate,
  ValidateNested,
  IsOptional,
  IsString,
  IsEnum,
  IsNumber,
} from "class-validator";
import { Type } from "class-transformer";
import { Customer } from "../../customer/base/Customer";
import { Delivery } from "../../delivery/base/Delivery";
import { OrderItem } from "../../orderItem/base/OrderItem";
import { EnumOrderOrderState } from "./EnumOrderOrderState";
import { EnumOrderOrderStatus } from "./EnumOrderOrderStatus";
import { Payment } from "../../payment/base/Payment";
import { EnumOrderState } from "./EnumOrderState";
import { EnumOrderStatus } from "./EnumOrderStatus";

@ObjectType()
class Order {
  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => Customer,
  })
  @ValidateNested()
  @Type(() => Customer)
  @IsOptional()
  customer?: Customer | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  customerRef!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Delivery],
  })
  @ValidateNested()
  @Type(() => Delivery)
  @IsOptional()
  deliveries?: Array<Delivery>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  orderDate!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [OrderItem],
  })
  @ValidateNested()
  @Type(() => OrderItem)
  @IsOptional()
  orderItems?: Array<OrderItem>;

  @ApiProperty({
    required: false,
    enum: EnumOrderOrderState,
  })
  @IsEnum(EnumOrderOrderState)
  @IsOptional()
  @Field(() => EnumOrderOrderState, {
    nullable: true,
  })
  orderState?: "Option1" | null;

  @ApiProperty({
    required: false,
    enum: EnumOrderOrderStatus,
  })
  @IsEnum(EnumOrderOrderStatus)
  @IsOptional()
  @Field(() => EnumOrderOrderStatus, {
    nullable: true,
  })
  orderStatus?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: () => [Payment],
  })
  @ValidateNested()
  @Type(() => Payment)
  @IsOptional()
  payments?: Array<Payment>;

  @ApiProperty({
    required: false,
    enum: EnumOrderState,
  })
  @IsEnum(EnumOrderState)
  @IsOptional()
  @Field(() => EnumOrderState, {
    nullable: true,
  })
  state?: "Option1" | null;

  @ApiProperty({
    required: false,
    enum: EnumOrderStatus,
  })
  @IsEnum(EnumOrderStatus)
  @IsOptional()
  @Field(() => EnumOrderStatus, {
    nullable: true,
  })
  status?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  totalAmount!: number | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  user!: string | null;
}

export { Order as Order };
